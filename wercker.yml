box: node:current-slim
build:
  steps:
    - npm-install
    - npm-test
    - script:
        name: echo nodejs information
        code: |
          echo "node version $(node -v) running"
          echo "npm version $(npm -v) running"
    - script:
        name: Create TLS key and cert
        code: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj "/CN=nginxsvc/O=nginxsvc"          
    # Docker image, and push to OCIR.
    - internal/docker-push:
            entrypoint: node app.js
            #cmd: 0.0.0.0 8080
            working-dir: $WERCKER_ROOT
            tag: $WERCKER_GIT_COMMIT
            ports: "3000"
            username: $DOCKER_USERNAME
            password: $DOCKER_PASSWORD
            repository: $DOCKER_REPO
            #registry: https://iad.ocir.io/v2
            
deploy-to-kubernetes:
    box: node:current-slim
    steps:
    - bash-template
    
    - script:
        name: Prepare Kubernetes files
        code: |
          mkdir $WERCKER_OUTPUT_DIR/kubernetes
          mv kubernetes_*.yml $WERCKER_OUTPUT_DIR/kubernetes

    - kubectl:
        name: delete namespace
        server: $OKE_MASTER
        token: $OKE_TOKEN
        insecure-skip-tls-verify: true
        command: delete namespace $WERCKER_APPLICATION_OWNER_NAME --ignore-not-found=true
        
    - script:
        name: wait to delete namespace
        code: sleep 30
        
    - kubectl:
        name: create namespace    
        server: $OKE_MASTER
        token: $OKE_TOKEN
        insecure-skip-tls-verify: true
        command: create namespace $WERCKER_APPLICATION_OWNER_NAME
        
    - kubectl:
        name: create OCR secret
        server: $OKE_MASTER
        token: $OKE_TOKEN
        insecure-skip-tls-verify: true
        command: create secret docker-registry $OKE_IMAGESECRET --docker-server=iad.ocir.io --docker-username='$DOCKER_USERNAME' --docker-password='$DOCKER_PASSWORD' --docker-email='$DOCKER_EMAIL' --namespace=$WERCKER_APPLICATION_OWNER_NAME

    - kubectl:
        name: create TLS secret
        server: $OKE_MASTER
        token: $OKE_TOKEN
        insecure-skip-tls-verify: true
        command: create secret tls tls-secret --key $WERCKER_ROOT/tls.key --cert $WERCKER_ROOT/tls.crt --namespace=$WERCKER_APPLICATION_OWNER_NAME
        
        
    - kubectl:
        name: deploy to kubernetes
        server: $OKE_MASTER
        token: $OKE_TOKEN
        insecure-skip-tls-verify: true
        command: apply -f $WERCKER_OUTPUT_DIR/kubernetes/ --namespace=$WERCKER_APPLICATION_OWNER_NAME

    # Tell Kubernetes that we're going to wait 60 seconds for the deploy to be successful
    - kubectl:
        name: set deployment timeout
        server: $OKE_MASTER
        token: $OKE_TOKEN
        insecure-skip-tls-verify: true
        command: patch deployment/nodesample -p '{"spec":{"progressDeadlineSeconds":60}}' --namespace=$WERCKER_APPLICATION_OWNER_NAME

    # Watch the Kubernetes deployment. Once the pods are considered healthy the step will exit 0
    # If they aren't healthy within 60 seconds, it will exit with a non 0 exit code, and cause the run to fail.
    - kubectl:
        name: check deployment status
        server: $OKE_MASTER
        token: $OKE_TOKEN
        insecure-skip-tls-verify: true
        command: rollout status deployment/nodesample --namespace=$WERCKER_APPLICATION_OWNER_NAME
        
